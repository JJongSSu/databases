프로그래밍 : topdown 방식(순서가 있음) -> 컴퓨터에 종속되어 있기 때문
DB : 집합적 사고
-> 프로그래밍과 DB를 같은 방식으로 접근하면 안된다
-> 효율성

SQL(Structured Query Language) 
ERD index key : 속도를 높이기 위해 특정 column에 설정
join(집합) : inner, left, right, full
	inner = 교집합
	fulll = 합집합
	left, right = 차집합

view : select문을 모아놓은 것
	-> DB에서 table을 join했을 때 속도가 느려질 경우 
	-> 업무상 많이 보이는 column들이 있을 경우 사용

ctrl + enter : 실행(커서가 세미콜론 안에 있어야 됨) 

SQL 명령어
	Query : 명령어로 시작하는 문장
	Insert 넣기
	Delete 없애기
	Update 바꾸기 -> column 기준으로 record 단위로 설정
	Select 고르기 : select * from table명; -> column 기준으로 record 단위로 설정
				SELECT count(column명) FROM table명; -> record 수 확인
				SELECT count(DISTINCT column명) FROM table명; -> 중복 값 제거, 프로그래밍에는 사용하지 않음
						파이썬 set = SQL distinct			값을 빨리 찾을 때만 사용	


	where column명 = '값'; -> 해당 값이 있는 data 가져옴
	where column명 like '값%'; -> 해당 값으로 시작하는 모든 data 가져옴( ex) 자동완성)
	where column명 like '%값%'; -> 해당 값이 포함된 모든 data 가져옴
	where column명 between A and B : A부터 B까지의 data 가져옴 -> 통계, count할 때 사용
	where column명 in (원하는 값들) : 원하는 값들의 data 가져옴
		-> 조건이 2개이더라도 where은 1개만 들어가야 함
	ex) SELECT NAME from ANIMAL_INS
		WHERE DATETIME IN (SELECT min(DATETIME) FROM ANIMAL_INS);

	order by column명 : 오름차순 정렬
	order by column명 desc : 내림차순 정렬
	-> 통계, 게시판에서 많이 사용

	연산자(=,>,<,!=(or <>)), (and, or, not), is null, is not null
	data -> 그리니티 천문대 기준으로 설정(날짜변경선 고려할 때)

ERD -> SQL
ALTER TABLE : table을 수정할 수 있는 table
		foreign key가 포함되어 있음

record 수와 column row수가 같으면 그 column이 PK(프라이머리 키)이다
-> 다 같지 않나???


DB
제품 구별 : DB를 여러개 구성할 수 있는지 확인
	휴대폰 앱 -> 1:1관계로 DB구성
	웹 -> DB 여러개 구성해놓고 다른 사이트에서 사용 가능하게 만듬

제품 접근 방식
	table 간 관계
		SQL : 관계형 기반(rdb : table간에 연결, column 변경이 어려움)
			-> 정해진 틀이 있는 업무에 사용
		NoSQL : rdb 없이 사용, column 변경 쉬움(프로그램 소스에서 column 추가 가능)
			-> DB를 모을 때 사용(로그인)
			-> IoT에서 많이 사용

	기술적 : ORM, ODM
		사용 편의성 : SQL 직관적 변경 가능
		호환성 : 개발과 제품 플랫폼 사용 가능 여부 확인
		도메인 변환 시 약간의 성능 저하

	DBMS
		RDB : Oracle, MySQL, MariaDB, PosrgreSQL, Sqlite
		NoSQL : MongoDB/CouchBase, Cassandra/HBase
		In-memery DB : Redis, memcached -> 로그인에 사용
	-> RDB, NoSQL은 파일에 저장 : 속도 느림
	-> In-memery DB은 메모리에 저장 : 정보 찾는 속도 빠름

java object=인스턴스(저장공간이 다름) 
인스턴스 : 메모리에 올라감
object : 디스크에 올라감

RAM(메모리카드), GPU(그래픽카드), CPU(동작)
프로그램 실행 -> 메모리에 올라감

모든 server는 port를 가지고 있다 












